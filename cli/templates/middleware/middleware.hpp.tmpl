#pragma once

#include <boson/middleware.hpp>
#include <boson/request.hpp>
#include <boson/response.hpp>
#include <iostream>
#include <chrono>
#include <iomanip>
#include <ctime>

/**
 * @brief {{.Name}} middleware function
 * 
 * This middleware provides {{.LowerName}} functionality for the application.
 * It logs request details and measures processing time.
 * 
 * @param request The HTTP request
 * @param response The HTTP response
 * @param next The next middleware in the chain
 */
void {{.LowerName}}Middleware(const boson::Request& request, boson::Response& response, boson::NextFunction& next) {
    // Record start time for performance measurement
    auto start = std::chrono::steady_clock::now();
    
    // Get current time for logging
    auto now = std::time(nullptr);
    auto tm = std::localtime(&now);
    
    std::cout << "[" << std::put_time(tm, "%Y-%m-%d %H:%M:%S") << "] "
              << "{{.Name}}Middleware processing request: " 
              << request.method() << " " << request.path() << std::endl;
    
    // Call the next middleware in the chain
    next();
    
    // Calculate and log processing time
    auto end = std::chrono::steady_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
    
    std::cout << "[" << std::put_time(tm, "%Y-%m-%d %H:%M:%S") << "] "
              << "{{.Name}}Middleware completed in " << duration << "ms" << std::endl;
}