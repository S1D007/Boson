openapi: 3.0.0
info:
  title: Library Management API
  description: |
    API for managing a library system built with Boson Framework.
    This API allows for managing books, users, and loan operations.
  version: '1.0.0'
  contact:
    name: Boson Framework
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: status
    description: API status operations
  - name: books
    description: Book management operations
  - name: users
    description: User management operations
  - name: loans
    description: Book loan operations

paths:
  /api/status:
    get:
      tags:
        - status
      summary: Get API status
      description: Returns the current status of the API
      operationId: getApiStatus
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  version:
                    type: string
                    example: 1.0.0
                  message:
                    type: string
                    example: Library Management API is running

  # Book endpoints
  /books:
    get:
      tags:
        - books
      summary: Get all books
      description: Returns a list of all books in the library
      operationId: getAllBooks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - books
      summary: Add a new book
      description: Add a new book to the library
      operationId: createBook
      requestBody:
        description: Book object to be added to the library
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}:
    get:
      tags:
        - books
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: ID of the book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - books
      summary: Update an existing book
      description: Update a book's information
      operationId: updateBook
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Book object with updated values
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - books
      summary: Delete a book
      description: Delete a book from the library
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/search:
    get:
      tags:
        - books
      summary: Search for books
      description: Search books by title, author, or genre
      operationId: searchBooks
      parameters:
        - name: title
          in: query
          description: Book title to search for
          schema:
            type: string
        - name: author
          in: query
          description: Book author to search for
          schema:
            type: string
        - name: genre
          in: query
          description: Book genre to search for
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/checkout:
    post:
      tags:
        - books
        - loans
      summary: Checkout a book
      description: Create a loan for a book
      operationId: checkoutBook
      requestBody:
        description: Book checkout information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
                bookId:
                  type: integer
                  format: int64
                daysToKeep:
                  type: integer
                  default: 14
              required:
                - userId
                - bookId
      responses:
        '201':
          description: Book checked out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Invalid input or book not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/return:
    post:
      tags:
        - books
        - loans
      summary: Return a book
      description: Return a previously checked out book
      operationId: returnBook
      requestBody:
        description: Book return information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loanId:
                  type: integer
                  format: int64
              required:
                - loanId
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Loan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User endpoints
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Returns a list of all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - users
      summary: Add a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        description: User object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      tags:
        - users
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - users
      summary: Update an existing user
      description: Update a user's information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object with updated values
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete a user account
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      tags:
        - users
      summary: User login
      description: Authenticate a user
      operationId: loginUser
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/loans:
    get:
      tags:
        - users
        - loans
      summary: Get user loans
      description: Returns all loans for a specific user
      operationId: getUserLoans
      parameters:
        - name: id
          in: path
          description: ID of the user to get loans for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "The Great Gatsby"
        author:
          type: string
          example: "F. Scott Fitzgerald"
        isbn:
          type: string
          example: "9780743273565"
        genre:
          type: string
          example: "Fiction"
        publicationYear:
          type: integer
          example: 1925
        available:
          type: boolean
          example: true
      required:
        - id
        - title
        - author
        - isbn
        - genre
        - publicationYear
        - available

    BookInput:
      type: object
      properties:
        title:
          type: string
          example: "The Great Gatsby"
        author:
          type: string
          example: "F. Scott Fitzgerald"
        isbn:
          type: string
          example: "9780743273565"
        genre:
          type: string
          example: "Fiction"
        publicationYear:
          type: integer
          example: 1925
      required:
        - title
        - author
        - isbn
        - genre
        - publicationYear

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [MEMBER, LIBRARIAN, ADMIN]
          example: "MEMBER"
      required:
        - id
        - name
        - email
        - role

    UserInput:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "password123"
        role:
          type: string
          enum: [MEMBER, LIBRARIAN, ADMIN]
          example: "MEMBER"
      required:
        - name
        - email
        - password

    Loan:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        bookId:
          type: integer
          format: int64
          example: 2
        checkoutDate:
          type: integer
          format: int64
          description: Unix timestamp of the checkout date
          example: 1713341234
        dueDate:
          type: integer
          format: int64
          description: Unix timestamp of the due date
          example: 1714637634
        returnDate:
          type: integer
          format: int64
          description: Unix timestamp of the return date, 0 if not returned yet
          example: 0
        status:
          type: string
          enum: [ACTIVE, RETURNED, OVERDUE]
          example: "ACTIVE"
      required:
        - id
        - userId
        - bookId
        - checkoutDate
        - dueDate
        - status

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Not Found"
        message:
          type: string
          example: "The requested resource was not found"
        path:
          type: string
          example: "/books/999"
      required:
        - error
        - message